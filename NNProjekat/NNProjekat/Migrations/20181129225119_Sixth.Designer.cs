// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using NNProjekat.Data;
using System;

namespace NNProjekat.Migrations
{
    [DbContext(typeof(NNProjekatDbContext))]
    [Migration("20181129225119_Sixth")]
    partial class Sixth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("NNProjekat.Models.Aktivnost", b =>
                {
                    b.Property<string>("StudentJMBG");

                    b.Property<string>("NastavnikJMBG");

                    b.Property<DateTime>("Datum");

                    b.Property<string>("SifraTipaAktivnosti");

                    b.Property<string>("SifraPredmeta");

                    b.Property<double>("BrojPoena");

                    b.Property<string>("NastavnikId");

                    b.Property<bool>("Status");

                    b.Property<bool>("Validna");

                    b.HasKey("StudentJMBG", "NastavnikJMBG", "Datum", "SifraTipaAktivnosti", "SifraPredmeta");

                    b.HasIndex("NastavnikId");

                    b.HasIndex("SifraTipaAktivnosti", "SifraPredmeta");

                    b.ToTable("Aktivnosti");
                });

            modelBuilder.Entity("NNProjekat.Models.Predmet", b =>
                {
                    b.Property<string>("SifraPredmeta")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BrojESPB");

                    b.Property<string>("Naziv");

                    b.HasKey("SifraPredmeta");

                    b.ToTable("Predmeti");
                });

            modelBuilder.Entity("NNProjekat.Models.Slusa", b =>
                {
                    b.Property<string>("SifraPredmeta");

                    b.Property<string>("JMBG");

                    b.Property<DateTime>("DatumPrvogUpisa");

                    b.Property<DateTime?>("DatumZakljucivanja");

                    b.Property<int?>("PredlozenaOcena");

                    b.Property<int?>("ZakljucenaOcena");

                    b.HasKey("SifraPredmeta", "JMBG");

                    b.HasIndex("JMBG");

                    b.ToTable("Slusanja");
                });

            modelBuilder.Entity("NNProjekat.Models.Student", b =>
                {
                    b.Property<string>("JMBG")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BrojIndeksa");

                    b.Property<string>("Ime");

                    b.Property<string>("Prezime");

                    b.HasKey("JMBG");

                    b.ToTable("Studenti");
                });

            modelBuilder.Entity("NNProjekat.Models.TipAktivnosti", b =>
                {
                    b.Property<string>("SifraTipaAktivnosti");

                    b.Property<string>("SifraPredmeta");

                    b.Property<double>("MaxBrojPoena");

                    b.Property<double>("MinBrojPoena");

                    b.Property<string>("Naziv");

                    b.Property<bool>("Obavezna");

                    b.Property<double>("TezinskiKoeficijent");

                    b.HasKey("SifraTipaAktivnosti", "SifraPredmeta");

                    b.HasIndex("SifraPredmeta");

                    b.ToTable("TipoviAktivnosti");
                });

            modelBuilder.Entity("NNProjekat.Models.Nastavnik", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Ime");

                    b.Property<string>("JMBG");

                    b.Property<string>("Pozicija");

                    b.Property<string>("Prezime");

                    b.ToTable("Nastavnik");

                    b.HasDiscriminator().HasValue("Nastavnik");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NNProjekat.Models.Aktivnost", b =>
                {
                    b.HasOne("NNProjekat.Models.Nastavnik", "Nastavnik")
                        .WithMany()
                        .HasForeignKey("NastavnikId");

                    b.HasOne("NNProjekat.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("StudentJMBG")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NNProjekat.Models.TipAktivnosti", "TipAktivnosti")
                        .WithMany()
                        .HasForeignKey("SifraTipaAktivnosti", "SifraPredmeta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NNProjekat.Models.Slusa", b =>
                {
                    b.HasOne("NNProjekat.Models.Student", "Student")
                        .WithMany()
                        .HasForeignKey("JMBG")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("NNProjekat.Models.Predmet", "Predmet")
                        .WithMany()
                        .HasForeignKey("SifraPredmeta")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("NNProjekat.Models.TipAktivnosti", b =>
                {
                    b.HasOne("NNProjekat.Models.Predmet", "Predmet")
                        .WithMany("TipoviAktivnosti")
                        .HasForeignKey("SifraPredmeta")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
